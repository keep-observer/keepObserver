{"version":3,"file":"KeepObserverNetwork.js","sources":["webpack:///webpack/universalModuleDefinition?5ca6*","webpack:///webpack/bootstrap c68d161effd90163ce5f?e1f8*","webpack:///src/tool/index.js?2d97*","webpack:///src/default/index.js?245b*","webpack:///src/services/observer/network/defaultConfig.js","webpack:///src/services/observer/network/handle.js","webpack:///src/services/observer/network/report.js","webpack:///src/services/observer/network/index.js","webpack:///src/services/observer/network/tool.js","webpack:///src/services/observer/network/api.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c68d161effd90163ce5f","/**\n * 根据时间搓 返回时间\n * @param date format\n * @return string\n */\nexport function dateFormat(date, format) {\n    if (!format || typeof format !== 'string') {\n        console.error('format is undefiend or type is Error');\n        return '';\n    }\n    date = date instanceof Date ? date : (typeof date === 'number' || typeof date === 'string') ? new Date(date) : new Date();\n    //解析\n    var formatReg = {\n        'y+': date.getFullYear(),\n        'M+': date.getMonth() + 1,\n        'd+': date.getDate(),\n        'h+': date.getHours(),\n        'm+': date.getMinutes(),\n        's+': date.getSeconds(),\n    }\n    for (var reg in formatReg) {\n        if (new RegExp(reg).test(format)) {\n            var match = RegExp.lastMatch;\n            format = format.replace(match, formatReg[reg] < 10 ? '0' + formatReg[reg] : formatReg[reg].toString());\n        }\n    }\n    return format;\n}\n\n\n/**\n * 检查script基本数据类型\n * @param mixed value\n * @return boolean\n */\nexport function isNumber(value) {\n    return Object.prototype.toString.call(value) == '[object Number]';\n}\nexport function isString(value) {\n    return Object.prototype.toString.call(value) == '[object String]';\n}\nexport function isArray(value) {\n    return Object.prototype.toString.call(value) == '[object Array]';\n}\nexport function isBoolean(value) {\n    return Object.prototype.toString.call(value) == '[object Boolean]';\n}\nexport function isUndefined(value) {\n    return value === undefined;\n}\nexport function isNull(value) {\n    return value === null;\n}\nexport function isSymbol(value) {\n    return Object.prototype.toString.call(value) == '[object Symbol]';\n}\nexport function isObject(value) {\n    return (\n        Object.prototype.toString.call(value) == '[object Object]' ||\n        // if it isn't a primitive value, then it is a common object\n        (!isNumber(value) &&\n            !isString(value) &&\n            !isBoolean(value) &&\n            !isArray(value) &&\n            !isNull(value) &&\n            !isFunction(value) &&\n            !isUndefined(value) &&\n            !isSymbol(value)\n        )\n    );\n}\nexport function isEmptyObject(obj) {\n    if (!isObject(obj)) {\n        return true;\n    }\n    for (var key in obj) {\n        return false;\n    }\n    return true\n}\nexport function isEmptyArray(array) {\n    if (!isArray(array)) {\n        return true\n    }\n    return array.length > 0 ? false : true\n}\nexport function isFunction(value) {\n    return Object.prototype.toString.call(value) == '[object Function]';\n}\nexport function isElement(value) {\n    return (\n        typeof HTMLElement === 'object' ? value instanceof HTMLElement : //DOM2\n        value && typeof value === \"object\" && value !== null && value.nodeType === 1 && typeof value.nodeName === \"string\"\n    );\n}\nexport function isWindow(value) {\n    var toString = Object.prototype.toString.call(value);\n    return toString == '[object global]' || toString == '[object Window]' || toString == '[object DOMWindow]';\n}\n/**\n * 检查是否是普通空对象\n * @param object obj\n * @return boolean\n */\nexport function isPlainObject(obj) {\n    var hasOwn = Object.prototype.hasOwnProperty;\n    // Must be an Object.\n    if (!obj || typeof obj !== 'object' || obj.nodeType || isWindow(obj)) {\n        return false;\n    }\n    try {\n        if (obj.constructor && !hasOwn.call(obj, 'constructor') && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {\n            return false;\n        }\n    } catch (e) {\n        return false;\n    }\n    var key;\n    for (key in obj) {}\n    return key === undefined || hasOwn.call(obj, key);\n}\n\n\n/*\n  转换工具\n */\nexport function toArray(array) {\n    return Array.prototype.slice.call(array)\n}\nexport function toString(content) {\n    if (!content) {\n        return '';\n    }\n    if (typeof content === 'string') {\n        return content\n    }\n    return content.toString()\n}\n\n\n\n/*\n    辅助存储保存监控数据\n    localStorage\n*/\nexport function setStorage(key, value) {\n    if (!window.localStorage) {\n        return;\n    }\n    key = 'keepObserverData_' + key;\n    value = JSON.stringify(value)\n    localStorage.setItem(key, value);\n}\nexport function getStorage(key) {\n    if (!window.localStorage) {\n        return;\n    }\n    key = 'keepObserverData_' + key;\n    var value = localStorage.getItem(key)\n    return value ? JSON.parse(value) : '';\n}\nexport function removeStorage(key) {\n    if (!window.localStorage) {\n        return;\n    }\n    key = 'keepObserverData_' + key;\n    localStorage.removeItem(key);\n}\n\n\n\n\n\n/*\n    深度合并内容\n    引用类型克隆合并\n    arguments[0] = target\n    arguments type is Object Or Array\n    多内容合并覆盖优先级: arguments[0]<arguments[1]<arguments[2]..\n    如果sources 不是数组或者对象 则直接忽略\n */\nexport function extend() {\n    var args = toArray(arguments);\n    if (args.length === 0) {\n        console.error('extends params is undefined')\n        return {};\n    }\n    if (args.length === 1) {\n        return args[0]\n    }\n    var target = args[0];\n    var sources = args.slice(1, args.length)\n\n    if (!isObject(target) && !isArray(target)) {\n        target = {};\n    }\n    sources.map(function(item) {\n        //防止死循环\n        if (target === item) {\n            return false;\n        }\n        //如果内容是对象 \n        if (isObject(item)) {\n            //开始遍历\n            for (var key in item) {\n                //如果内容是对象\n                if (isObject(item[key])) {\n                    //修正数据\n                    target[key] = (target[key] && isObject(target[key])) ? target[key] : {};\n                    target[key] = extend(target[key], item[key])\n                } else if (isArray(item[key])) {\n                    //修正数据\n                    target[key] = (target[key] && isArray(target[key])) ? target[key] : [];\n                    target[key] = extend(target[key], item[key])\n                } else {\n                    //基本类型直接赋值\n                    target[key] = item[key]\n                }\n            }\n        } else if (isArray(item)) {\n            for (var i = 0; i < item.length; i++) {\n                //如果内容是对象\n                if (isObject(item[i])) {\n                    //修正数据\n                    target[i] = (target[i] && isObject(target[i])) ? target[i] : {}\n                    target[i] = extend(target[i], item[i])\n                } else if (isArray(item[i])) {\n                    //修正数据\n                    target[i] = (target[i] && isArray(target[i])) ? target[i] : [];\n                    target[i] = extend(target[i], item[i])\n                } else {\n                    //基本类型直接赋值\n                    target[i] = item[i]\n                }\n            }\n        }\n        //其他类型直接忽略  \n    })\n    return target\n}\n\n\n// WEBPACK FOOTER //\n// src/tool/index.js","import * as tool from '../tool/index.js'\n\n//公共默认类\n//提供一些全局公共方法\nclass KeepObserverDefault {\n\n    constructor(config) {\n        //开发模式下的log 替换window.console.log\n        this.$devLog = false;\n        //开发模式写error log 替换window.console.error\n        this.$devError = false;\n\n        this._keeepObserverDetaultInit();\n    }\n\n\n    _keeepObserverDetaultInit() {\n        var that = this;\n        //初始化$devLog\n        that.$devLog = window.console.log\n        window.console.log = (...args) => {\n            that.$devLog.apply(window.console, args);\n        };\n        //初始化$devError\n        that.$devError = window.console.error\n        window.console.error = (...args) => {\n            that.$devError.apply(window.console, args);\n        };\n        //初始化$devWarn\n        that.$devWarn = window.console.warn\n        window.console.warn = (...args) => {\n            that.$devWarn.apply(window.console, args);\n        };\n    }\n\n\n\n    $mixin(provider) {\n        if (!provider || !tool.isObject(provider) || tool.isEmptyObject(provider)) {\n            this.$error('keepObserver $mixin receive params not right')\n        }\n        for (var key in provider) {\n            if (this[key]) {\n                continue\n            }\n            this[key] = provider[key]\n        }\n    }\n\n}\n\n\n\n\n\n\nexport default KeepObserverDefault;\n\n\n// WEBPACK FOOTER //\n// src/default/index.js","\n\n\n\n/*\n \tobserver newwork 实例默认配置数据\n */ \nexport default {\n\t//默认超时时间 20S;\n\ttimeout: 20000,\n\t//屏蔽URL\n\tignoreRequestList:false,\n\t//自定义判断接口返回是否正确\n\tonHandleJudgeResponse :false,\n\t//自定义处理响应数据 \n\tonHandleResponseData :false,\n\t//自定义处理请求数据\n\tonHandleRequestData :false,\n\n}\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// src/services/observer/network/defaultConfig.js","import * as tool from '../../../tool/index.js';\nimport * as networkTool from './tool.js';\n/*\n    \t初始化ajax请求监控\n    \t在这里替换window.XMLHttpRequest变量进行监控\n     */\nexport var _handleInit = function() {\n    var that = this;\n    var _XMLHttp = window.XMLHttpRequest;\n    //不支持 ajax 不进行监控\n    if (!_XMLHttp) {\n        return false;\n    }\n    that._open = window.XMLHttpRequest.prototype.open\n    that._send = window.XMLHttpRequest.prototype.send\n    that._setRequestHeader = window.XMLHttpRequest.prototype.setRequestHeader\n    //处理Ajax\n    that._handleXMLAjax();\n}\n\n\n/*\n\t拦截XML AJax信息\n */\nexport var _handleXMLAjax = function() {\n    var that = this;\n    //拦截原生open\n    window.XMLHttpRequest.prototype.open = function() {\n        var XML = this;\n        var args = tool.toArray(arguments);\n        //定时器\n        var timer = null;\n        //获取请求唯一ID\n        var id = networkTool.getUniqueID();\n        //获取方法\n        var method = args[0];\n        //获取url\n        var url = args[1];\n\n        //保存下 在send中使用\n        XML._url = url;\n        XML._method = method;\n        XML._id = id;\n        //保存下请求头 在拦截请求头处使用\n        XML._setHead = {}\n        XML._setHead[id] = {};\n\n        //拦截处理响应回调\n        var _onreadystatechange = XML.onreadystatechange || function() {};\n        // start onreadystatechange\n        var onreadystatechange = function() {\n            var item = that.networkList[id] ? that.networkList[id] : false;\n            //如果不存在 可能略过了send 会导致丢失部分数据\n            if (!item) {\n                item = {}\n                //保存请求方法\n                item.method = method\n                var {\n                    url,\n                    params\n                } = networkTool.handleReqUrl(url);\n                //处理请求url和params\n                item.url = url;\n                item.params = params;\n            }\n            //更新状态\n            item.status = 0;\n            if (XML.readyState > 1) {\n                item.status = XML.status;\n            }\n            item.responseType = XML.responseType;\n            //判断请求状态\n            if (XML.readyState == 0) {\n                // 未开始\n                if (!item.startTime) {\n                    item.startTime = (+new Date());\n                }\n            } else if (XML.readyState == 1) {\n                // 打开\n                if (!item.startTime) {\n                    item.startTime = (+new Date());\n                }\n            } else if (XML.readyState == 2) {\n                // 发送\t\t          \t\n            } else if (XML.readyState == 3) {\n                //loading\n            } else if (XML.readyState == 4) {\n                //结束超时捕获\n                that._handleTimeout(id);\n                //处理响应头\n                item.resHead = {};\n                var header = XML.getAllResponseHeaders() || '',\n                    headerArr = header.split(\"\\n\");\n                //提取数据\n                for (let i = 0; i < headerArr.length; i++) {\n                    let line = headerArr[i];\n                    if (!line) {\n                        continue;\n                    }\n                    let arr = line.split(': ');\n                    let key = arr[0],\n                        value = arr.slice(1).join(': ');\n                    item.resHead[key] = value;\n                }\n                //完成\n                clearInterval(timer);\n                item.endTime = +new Date(),\n                    item.costTime = (item.endTime - (item.startTime || item.endTime)) + 'ms';\n                item.response = XML.response;\n                //请求结束完成\n                setTimeout(function() {\n                    //是否是超时接口 超时的接口不做处理\n                    if (!that.timeoutRequest[id]) {\n                        that._handleDoneXML(id)\n                    }\n                })\n            } else {\n                clearInterval(timer);\n            }\n            //如果这个接口已经超时处理了 那么不记录\n            if (!that.timeoutRequest[id]) {\n                that.networkList[id] = item;\n            }\n            return _onreadystatechange.apply(XML, arguments);\n        }\n        XML.onreadystatechange = onreadystatechange;\n        //end onreadystatechange\n        //防止第三方库更改状态\n        //定时查看请求状态\n        var preState = -1;\n        timer = setInterval(function() {\n            if (preState != XML.readyState) {\n                preState = XML.readyState;\n                onreadystatechange.call(XML);\n            }\n        }, 10);\n        return that._open.apply(XML, args);\n    }\n    //拦截原始设置请求头\n    window.XMLHttpRequest.prototype.setRequestHeader = function() {\n        var XML = this;\n        var args = tool.toArray(arguments);\n        if (XML._id && XML._setHead) {\n            var setHead = XML._setHead[XML._id];\n            var key = args[0] ? args[0] : 'unkownRequestHead';\n            var value = args[1] ? args[1] : '';\n            setHead[key] = value\n            XML._setHead[XML._id] = setHead\n        }\n        return that._setRequestHeader.apply(XML, args);\n    }\n    //拦截原生send\n    window.XMLHttpRequest.prototype.send = function() {\n        var XML = this;\n        var id = XML._id;\n        var method = XML._method.toUpperCase();\n        var requestHead = XML._setHead[id];\n        var url = XML._url;\n        var args = [].slice.call(arguments),\n            data = args[0],\n            saveData = '';\n        //监听列表中创建一条请求\n        if (!that.networkList[id]) {\n            that.networkList[id] = {}\n        }\n        //保存请求方法\n        that.networkList[id].method = method;\n        var {\n            url,\n            params\n        } = networkTool.handleReqUrl(url);\n        //处理请求url和params\n        that.networkList[id].url = url;\n        that.networkList[id].params = params;\n        //保存自定义请求头\n        if (requestHead) {\n            that.networkList[id].reqHead = tool.extend({}, requestHead);\n            delete XML._setHead[id];\n        }\n        //如果是post数据保存\n        if (method === 'POST') {\n            if (tool.isString(data)) {\n                saveData = data;\n            }\n        }\n        that.networkList[id].data = saveData;\n        //开启定时器 判断接口是否超时\n        that._handleTimeout(id);\n        return that._send.apply(XML, args);\n    }\n}\n\n\n\n/*\n\t处理接口请求超时\n */\nexport var _handleTimeout = function(id) {\n    var that = this;\n    var timeout = that._config.timeout\n    var isTimeout = that.timeoutRequest[id] ? that.timeoutRequest[id] : false;\n    var time = that.timeout[id] ? that.timeout[id] : false;\n    var item = that.networkList[id];\n    //如果不存在 不做处理\n    if (!item || isTimeout) {\n        return false;\n    }\n    if (!time) {\n        //如果没有那么创建检测超时定时器\n        time = setTimeout(function() {\n            //接口返回超时\n            item.isTimeout = true;\n            item.timeout = timeout;\n            item.isError = true;\n            item.errorContent = '接口响应超时，超时时间:' + timeout + '(ms)';\n            //这里直接完成添加到超时列表 停止后续处理\n            that._handleDoneXML(id)\n            that.timeoutRequest[id] = true\n        }, timeout)\n    } else {\n        //如果存在 则说明已经回调 取消超时定时器\n        clearTimeout(time)\n    }\n}\n\n\n\n/*\n\t处理请求完成的数据\n\t@id:拦截请求唯一ID\n */\nexport var _handleDoneXML = function(id) {\n    var that = this;\n    var ajaxItem = tool.extend({}, that.networkList[id]);\n    var {\n        onHandleJudgeResponse,\n        onHandleRequestData,\n        onHandleResponseData\n    } = that._config;\n    //空的对象不做处理\n    if (tool.isEmptyObject(ajaxItem)) {\n        return false;\n    }\n    /******   这里开始处理数据  *****/\n    //判断当前请求数据url是否需要屏蔽\n    if (!that._handleJudgeDisbale(ajaxItem)) {\n        that.networkList[id];\n        return false;\n    }\n    //如果存在自定义处理 请求data配置\n    if (onHandleRequestData) {\n        try {\n            ajaxItem.handleReqData = onHandleRequestData(ajaxItem)\n        } catch (err) {\n            ajaxItem.handleReqData = '自定义handleRequestData出错:' + err\n        }\n    }\n    //判断状态码是否出错\n    var status = ajaxItem.status;\n    if (!networkTool.validateStatus(status) && !ajaxItem.isError) {\n        ajaxItem.isError = true;\n        ajaxItem.errorContent = 'http请求错误!错误状态码:' + status;\n    }\n    //如果存在自定义处理 响应data配置\n    if (onHandleResponseData && !ajaxItem.isError) {\n        try {\n            ajaxItem.handleResData = onHandleResponseData(ajaxItem)\n        } catch (err) {\n            ajaxItem.handleResData = '自定义handleResponseData出错:' + err\n        }\n    }\n    //如果存在自定义处理响应数据是否出错\n    if (onHandleJudgeResponse && !ajaxItem.isError) {\n        try {\n            ajaxItem.isError = onHandleJudgeResponse(ajaxItem);\n            if (ajaxItem.isError) {\n                ajaxItem.errorContent = ajaxItem.isError;\n                ajaxItem.isError = true\n            }\n        } catch (err) {\n            ajaxItem.isError = true\n            ajaxItem.errorContent = '自定义判断handleJudgeResponse出错:' + err;\n        }\n    }\n    //通知上传\n    that.noticeReport(ajaxItem);\n    //上报后删除记录\n    delete that.networkList[id];\n}\n\n\n\n/*\n\t判断该请求是否是屏蔽请求\n\tparams\n\t\tajaxInfo :即将上报的数据\n\treturn\n\t\t忽略返回 false;\n\t\t不忽略返回 true\n */\nexport var _handleJudgeDisbale = function(ajaxInfo) {\n    var {\n        ignoreRequestList\n    } = this._config;\n    //判断是否是是屏蔽url\n    if (ignoreRequestList && tool.isArray(ignoreRequestList)) {\n        var url = ajaxInfo.url\n        var unReport = false;\n        ignoreRequestList.forEach(function(item) {\n            if (url.indexOf(item) > -1) {\n                unReport = true;\n                return false;\n            }\n        });\n        if (unReport) {\n            return false;\n        }\n    }\n    //判断是否是keepObserver的上报请求\n    if (ajaxInfo.reqHead && ajaxInfo.reqHead['keepObserver-reportAjax']) {\n        return false;\n    }\n    return true;\n}\n\n\n// WEBPACK FOOTER //\n// src/services/observer/network/handle.js","import * as tool from '../../../tool/index.js';\n\n\n\n//注册上报监听\nexport var addReportListener = function(callback) {\n    if (callback) {\n        this.eventListener.push(callback)\n    }\n}\n\n\n\n\n//处理整理数据\nexport var handleReportData = function(content) {\n    var reportParams = {};\n    var control = {};\n    reportParams.type = \"observer\"\n    reportParams.typeName = 'network';\n    reportParams.location = window.location.href;\n    reportParams.data = content;\n    reportParams.reportTime = new Date().getTime();\n    //option\n    control.lazy = true;\n    //是否请求出错\n    if (content.isError) {\n        control = {};\n        control.lazy = false;\n        control.isReport = true;\n        //是否是超时请求,超时请求不合并上报\n        control.trackExtend = content.isTimeout ? false : true;\n        control.isError = content.isTimeout ? false : true;\n    }\n    return {\n        reportParams: reportParams,\n        control: control\n    }\n}\n\n\n\n\n//通知上报\nexport var noticeReport = function(content) {\n    var that = this;\n    if (that.eventListener.length === 0) {\n        return false;\n    }\n    //通知上报\n    that.eventListener.map(function(item) {\n        if (tool.isFunction(item)) {\n            var {\n                reportParams,\n                control\n            } = that.handleReportData(content)\n            item(reportParams, control);\n        }\n    })\n}\n\n\n// WEBPACK FOOTER //\n// src/services/observer/network/report.js","import defaultConfig from './defaultConfig.js';\nimport * as tool from '../../../tool/index.js';\n\nimport * as handleServer from './handle.js'\nimport * as apiServer from './api.js'\nimport * as reportServer from './report.js'\n\nimport KeepObserverDetault from '../../../default/index.js';\n\n\n// 获取系统信息\nclass KeepObserverNetwork extends KeepObserverDetault {\n    //构造函数\n    constructor(config) {\n        super()\n        var networkConfig = config.networkCustom || {};\n        //存混合配置\n        this._config = tool.extend(defaultConfig, networkConfig)\n        //上报名\n        this._typeName = 'network'\n        //监听列表\n        this.eventListener = [];\n        //监控的数据列表\n        //key 为 请求ID\n        //value :{\n        //\tmethod:   \t\t\t请求方法\n        //\turl:      \t\t\t请求baseUrl\n        //\treqHead:     \t\t请求头\n        //\tresHead:        \t请求响应头\n        //\tparams:   \t\t\t请求URL上携带的参数\n        //\tdata:       \t\t请求postData\n        //\tstatus:         \t请求状态码\n        //\tstartTime:      \t请求开始时间\n        //\tendTime:        \t请求结束时间\n        //\tcostTime:       \t请求耗时\n        //\tresponse: \t\t\t请求原始响应数据\n        //\tresponseType    \t请求响应类型\n        //\thandleResData:     \t如果配置中传入 自定义处理响应数据 那么这里将保持处理后的响应数据\n        //\thandleReqData:      如果配置中传入 自定义处理发送数据 那么这里将保持处理后的发送数据\n        //\tisTimeout:          是否超时 如果存在这个字段 则说明已经上报,忽略处理\n        //\ttimeout:            如果超时 这里是设置的超时时间\n        //\tisError:            这个请求是否出现错误\n        //\terrorContent:       错误信息\n        //}\n        this.networkList = {}\n        //替换window.XMLHttpRequest变量\n        this._open = false;\n        this._send = false;\n        this._setRequestHeader = false;\n        //辅助捕获超时\n        this.timeout = {};\n        this.timeoutRequest = {};\n        //混入自身方法\n        this.$mixin(handleServer)\n        this.$mixin(apiServer)\n        this.$mixin(reportServer)\n        // 开启网络拦截监控\n        this.startObserver();\n    }\n\n\n    //提供一个挂载入口\n    apply(pipe) {\n        this.addReportListener(pipe.sendPipeMessage)\n        return {\n            $networkStop: this.stopObserver,\n            $networkStart: this.startObserver\n        }\n    }\n}\n\n\n\n\nexport default KeepObserverNetwork\n\n\n// WEBPACK FOOTER //\n// src/services/observer/network/index.js","/*\n   参考Vconsole 生产唯一ID\n   * generate an unique id string (32)\n   * @private\n   * @return string\n*/\nexport function getUniqueID() {\n    var id = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0,\n            v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n    return id;\n}\n\n\n/*\n\t处理URL\n\t分离base url 和params\n\t@return {\n\t\turl:  string\n\t\tparams: object or string('')\n\t}\n */\n\nexport function handleReqUrl(url) {\n    //处理下解码URL\n    url = window.decodeURIComponent(url);\n    var params = '';\n    var baseUrl = '';\n    //判断URL后面是否存在参数\n    if (url.indexOf('?') === -1) {\n        baseUrl = url;\n    } else {\n        var query = url.indexOf('?');\n        baseUrl = url.substring(0, query);\n        query = url.substring(query + 1, url.length);\n        params = {};\n        query = query.split('&'); // => ['b=c', 'd=?e']\n        for (let q of query) {\n            q = q.split('=');\n            params[q[0]] = q[1];\n        }\n    }\n    return {\n        url: baseUrl,\n        params: params\n    }\n}\n\n/*\n\t检查状态码是否正确\n */\nexport function validateStatus(status) {\n    return status >= 200 && status < 300;\n}\n\n\n// WEBPACK FOOTER //\n// src/services/observer/network/tool.js","/*\n    \t停止监听\n     */\nexport var stopObserver = function() {\n    window.XMLHttpRequest.prototype.open = this._open\n    window.XMLHttpRequest.prototype.send = this._send\n    window.XMLHttpRequest.prototype.setRequestHeader = this._setRequestHeader\n    this._open = null;\n    this._send = null\n    this.__setRequestHeader = null;\n}\n\n\n\n/*\n\t开始监听\n */\nexport var startObserver = function() {\n    //开启网络拦截监控\n    this._handleInit();\n}\n\n\n// WEBPACK FOOTER //\n// src/services/observer/network/api.js"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3DA;AA8BA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAeA;AASA;AAMA;AAGA;AAMA;AASA;AAsBA;AAGA;AAgBA;AAQA;AAQA;AAoBA;AArLA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/OA;AACA;AADA;AACA;;;;;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AASA;;;;;;;;;;;;;;;ACpDA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;;;;ACPA;AACA;AADA;AACA;AAAA;AACA;AADA;AACA;;;AAAA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAQA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAmBA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;AAQA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnUA;AACA;AADA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3DA;AACA;;;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;;;;;;;;;;;;;AAEA;AACA;;;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AA6CA;AACA;AAEA;AACA;AACA;;;AADA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;AAzDA;AACA;AA8DA;;;;;;;;;;;;;ACpEA;AAmBA;AA4BA;AArDA;;;;;;AAMA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;;;;;;;ACvDA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AAGA;AACA;AACA;AACA;;;;;A","sourceRoot":""}